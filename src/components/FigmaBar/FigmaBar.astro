---
import FullFigmaBar from "./FullFigmaBar.astro";
import SlimFigmaBar from "./SlimFigmaBar.astro";
---

<aside>
  <FullFigmaBar />
  <SlimFigmaBar />
</aside>

<script>
  type FigmaElement = {
    label: HTMLElement,
    element: HTMLElement,
  }

  const initSidebarButtons = () => {
    const buttons = document.querySelectorAll(".sidebar-button");

    buttons?.forEach((button) => {
      const id = button?.getAttribute("aria-controls");
      if (!button || !id) return;

      const bar = document.getElementById(id);
      if (!bar) return;

      button.addEventListener('click', (event) => {
        const isExpanded = button.getAttribute('aria-expanded');

        if (isExpanded === 'true') {
          buttons.forEach((button) => button.setAttribute('aria-expanded', 'false'));
          bar.classList.add('hide');
        } else {
          buttons.forEach((button) => button.setAttribute('aria-expanded', 'true'));
          bar.classList.remove('hide');
        }
      });
    });
  }

  // Wraps element's contents in a `.content` container
  // so we can layer it in our JavaScript
  // Look into accessibility in the future; seems like a tough one
  const buildInspectedElement = (label: HTMLElement, element: HTMLElement): void => {
    const container = document.createElement('div');
    const highlightBox = document.createElement('div');
    const marginBox = document.createElement('div');
    highlightBox.classList.add('highlight-box');
    marginBox.classList.add('margin-box');
    container.classList.add('content');

    label.setAttribute('data-active', 'true');
    element.setAttribute('data-inspected', 'true');

    const style = window.getComputedStyle(element);
    element.style.setProperty('--margin-top', style.marginTop);
    element.style.setProperty('--margin-right', style.marginRight);
    element.style.setProperty('--margin-bottom', style.marginBottom);
    element.style.setProperty('--margin-left', style.marginLeft);

    // Wrap existing element DOM in `.content` container
    container.innerHTML = element.innerHTML;
    element.innerHTML = '';
    element.appendChild(container);
    element.appendChild(highlightBox);
    element.appendChild(marginBox);
  };

  // Destroy inspect element DOM and styles
  const destroyInspectedElement = (label: HTMLElement, element: HTMLElement): void => {
    const content = element.querySelector('.content');
    const highlightBox = element.querySelector('.highlight-box');
    const marginBox = element.querySelector('.margin-box');

    label.removeAttribute('data-active');
    element.removeAttribute('data-inspected');
    if (highlightBox) element.removeChild(highlightBox);
    if (marginBox) element.removeChild(marginBox);
    if (content) element.innerHTML = content.innerHTML; // Unwrap `.content` class
  }

  // Finds previous inspected element and destroys before building new
  const destroyPreviousInspectedElement = (): void => {
    const label = document.querySelector('[data-active]') as HTMLElement;
    const element = document.querySelector('[data-inspected') as HTMLElement;
    if (!label) return;

    destroyInspectedElement(label, element);
  }

  const getFigmaElements = (): FigmaElement[] => {
    const figmaElements: FigmaElement[] = [];
    // TypeScript can't infer the selector string, so it falls back to type Element[]
    const labels = [...document.querySelectorAll('#figma-bar--full .layers li[aria-controls]')] as HTMLElement[];

    labels.forEach((label) => {
      const associatedId = label.getAttribute('aria-controls');
      if (!associatedId) return;

      const associatedElement = document.getElementById(associatedId);
      if (!associatedElement) return;

      figmaElements.push({
        label,
        element: associatedElement
      });
    });

    return figmaElements;
  }

  const handleInspectClick = (object: FigmaElement): void => {
    const label = object['label'];
    const element = object['element'];

    label.addEventListener('click', (event) => {
      event.preventDefault(); // Anchor element so prevent default
      element.scrollIntoView();

      const isActive = label.getAttribute('data-active');
      if (isActive) {
        destroyInspectedElement(label, element);
        return;
      }

      destroyPreviousInspectedElement();
      buildInspectedElement(label, element);
    });
  }

  // Hide by default on mobile
  const initFigmaBar = (): void => {
    const isPhone = window.innerWidth < 1024 ? true : false;
    const figmaBar = document.getElementById('figma-bar--full');
    const buttons = document.querySelectorAll('.sidebar-button');

    // Can clean up this duplicate logic
    if (isPhone) {
      figmaBar?.classList.add('hide');
      buttons.forEach((button) => button.setAttribute('aria-expanded', 'false'));
    }

    window.addEventListener('resize', (event) => {
      if (isPhone) {
        figmaBar?.classList.add('hide');
        buttons.forEach((button) => button.setAttribute('aria-expanded', 'false'));
      }
    });
  }

  const initDevTools = (): void => {
    const figmaElements = getFigmaElements();
    figmaElements?.forEach((element) => element && handleInspectClick(element));
  }

  initFigmaBar();
  initSidebarButtons();
  initDevTools();
</script>