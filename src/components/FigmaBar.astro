---
import Froggy from "../images/froggy.svg";
import Cube from "../images/cube.svg";
---

<aside class="figma-bar">
  <div>
    <header>
      <div class="froggy-container">
        <button id="froggy">
          <Froggy />
        </button>
        <div class="chat-bubble">
          <span class="message">Ribbit!!</span>
        </div>
      </div>
      
      <h2 class="title">My Portfolio 2025!!</h2>
    </header>

    <section aria-labelledby="layers-title" class="layers">
      <h3 id="layers-title">Layers</h3>

      <nav>
        <ol class="padding-left">
          <li class="list-heading">
            <a href="#hero-section-element">
              <Cube />
              Homepage
            </a>
          </li>
          <ol class="padding-left">
            <li id="hero-heading-label" aria-controls="hero-heading-element">
              <a href="#hero-heading-element">
                <Cube />
                Heading
              </a>
            </li>
            <li id="hero-subtitle-label" aria-controls="hero-subtitle-element">
              <a href="#hero-subtitle-element">
                <Cube />
                Subtitle
              </a>
            </li>
            <li id="hero-button-label" aria-controls="hero-button-element">
              <a href="#hero-button-element">
                <Cube />
                Button
              </a>
            </li>
            <li id="hero-code-label" aria-controls="hero-code-element">
              <a href="#hero-code-element">
                <Cube />
                Code Bubble
              </a>
            </li>
          </ol>
        </ol>
      </nav>
    </section>
  </div>
</aside>

<script>
  type FigmaElement = {
    label: HTMLElement,
    element: HTMLElement,
  }

  // Wraps element's contents in a `.content` container
  // so we can layer it in our JavaScript
  // Look into accessibility in the future; seems like a tough one
  const buildInspectedElement = (label: HTMLElement, element: HTMLElement): void => {
    const container = document.createElement('div');
    const highlightBox = document.createElement('div');
    const marginBox = document.createElement('div');
    highlightBox.classList.add('highlight-box');
    marginBox.classList.add('margin-box');
    container.classList.add('content');

    label.setAttribute('data-active', 'true');
    element.setAttribute('data-inspected', 'true');

    const style = window.getComputedStyle(element);
    element.style.setProperty('--margin-top', style.marginTop);
    element.style.setProperty('--margin-right', style.marginRight);
    element.style.setProperty('--margin-bottom', style.marginBottom);
    element.style.setProperty('--margin-left', style.marginLeft);

    // Wrap existing element DOM in `.content` container
    container.innerHTML = element.innerHTML;
    element.innerHTML = '';
    element.appendChild(container);
    element.appendChild(highlightBox);
    element.appendChild(marginBox);
  };

  // Destroy inspect element DOM and styles
  const destroyInspectedElement = (label: HTMLElement, element: HTMLElement): void => {
    const content = element.querySelector('.content');
    const highlightBox = element.querySelector('.highlight-box');
    const marginBox = element.querySelector('.margin-box');

    label.removeAttribute('data-active');
    element.removeAttribute('data-inspected');
    if (highlightBox) element.removeChild(highlightBox);
    if (marginBox) element.removeChild(marginBox);
    if (content) element.innerHTML = content.innerHTML; // Unwrap `.content` class
  }

  // Finds previous inspected element and destroys before building new
  const destroyPreviousInspectedElement = (): void => {
    const label = document.querySelector('[data-active]') as HTMLElement;
    const element = document.querySelector('[data-inspected') as HTMLElement;
    if (!label) return;

    destroyInspectedElement(label, element);
  }

  const getFigmaElements = (): FigmaElement[] => {
    const figmaElements: FigmaElement[] = [];
    // TypeScript can't infer the selector string, so it falls back to type Element[]
    const labels = [...document.querySelectorAll('.figma-bar .layers li[aria-controls]')] as HTMLElement[];

    labels.forEach((label) => {
      const associatedId = label.getAttribute('aria-controls');
      if (!associatedId) return;

      const associatedElement = document.getElementById(associatedId);
      if (!associatedElement) return;

      figmaElements.push({
        label,
        element: associatedElement
      });
    });

    return figmaElements;
  }

  const handleInspectClick = (object: FigmaElement): void => {
    const label = object['label'];
    const element = object['element'];

    label.addEventListener('click', (event) => {
      event.preventDefault(); // Anchor element so prevent default
      element.scrollIntoView();

      const isActive = label.getAttribute('data-active');
      if (isActive) {
        destroyInspectedElement(label, element);
        return;
      }

      destroyPreviousInspectedElement();
      buildInspectedElement(label, element);
    });
  }

  const initDevTools = (): void => {
    const figmaElements = getFigmaElements();
    figmaElements?.forEach((element) => element  && handleInspectClick(element));
  }

  initDevTools();

  // const froggy = document.getElementById('froggy');
  // const chat = document.querySelector('.froggy-container .chat-bubble');

  // // Make this more accessible when it's not 2am
  // if (froggy && chat) {
  //   froggy.addEventListener('click', (event) => {
  //     chat.classList.toggle("show");
  //   });
  // }
</script>
